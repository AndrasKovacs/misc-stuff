
### Source language


Γ ⊢            Context formation
Γ ⊢ A type i   Type formation at level i ∈ ℕ
Γ ⊢ t : A      Typing

───
∙ ⊢

Γ ⊢   Γ ⊢ A
───────────
Γ, a : A ⊢

────────────────────
Γ, x : A, Δ ⊢ x : A

 i ∈ ℕ
───────
Γ ⊢ U i type (i + 1)

Γ ⊢ A : U i
───────────
 Γ ⊢ El A type i

────────────────────
Γ ⊢ U' i : U (1 + i)

El (U' i) ≡ U i

Γ ⊢ A : U i   Γ, a : El A ⊢ B : U j
───────────────────────────────────
    Γ ⊢ (a : A) → B : U (i ⊔ j)

   Γ, a : El A ⊢ t : El B
────────────────────────────
Γ ⊢ λ a. t : El ((a : A) → B)

Γ ⊢ t : El ((a : A) → B)   Γ ⊢ u : El A
───────────────────────────────────────
    Γ ⊢ t u : El (B[a ↦ u])

(λ a. t) u ≡ t[a ↦ u]
λ a. t a ≡ t



### Target language


Γ ⊢           Context formation
Γ ⊢ A type i  Type formation at level i ∈ ℕ
Γ ⊢ t : A     Typing
Γ ⊢ σ : Δ     Substitutions

Context

───
∙ ⊢

Γ ⊢   Γ ⊢ A type i
──────────────────
Γ, a : A ⊢

Variables

────────────────────
Γ, x : A, Δ ⊢ x : A

Substitutions (omitted: category, presheaf laws)

Γ ⊢ A type i   Γ ⊢ σ : Δ
────────────────────────
   Δ ⊢ A[σ] type i

Γ ⊢ t : A   Γ ⊢ σ : Δ
─────────────────────
   Δ ⊢ t[σ] : A[σ]

──────────
Γ ⊢ [] : ∙

Γ ⊢ σ : Δ   Δ ⊢ A type i   Γ ⊢ t : A[σ]
───────────────────────────────────────
    Γ ⊢ [σ, x ↦ t] : (Δ, x : A)

       Γ ⊢ σ : (Δ, a : A)
─────────────────────────────────
Γ ⊢ π₁ σ : Δ   Γ ⊢ π₂ σ : A[π₁ σ]

──────────
Γ ⊢ id : Γ


Types

       i ∈ ℕ
────────────────────
Γ ⊢ U i type (i + 1)

  Γ ⊢ A : U i
───────────────
Γ ⊢ El A type i

────────────
Γ ⊢ ⊤ type 0

──────────
Γ ⊢ tt : ⊤

Γ ⊢ t : ⊤
──────────
Γ ⊢ t ≡ tt

Γ ⊢ A type i   Γ, a : A ⊢ B type j
──────────────────────────────────
  Γ ⊢ (a : A) → B type (max i j)

   ∙, a : A ⊢ t : B
────────────────────────
Γ ⊢ λ a. t : (a : A) → B

Γ ⊢ t : (a : A) → B   Γ ⊢ u : A
───────────────────────────────
   Γ ⊢ t u : B[a ↦ u]

(λ a. t) u ≡ t[a ↦ u]
t ≡ (λ a. t a)     -- possible only if ∙ ⊢ t : (a : A) → B

-- Σ types

-- We only use Σ to store closed environment types, so we make type formation closed
-- This makes context quoting more efficient, since Σ codes only need to store primitive
-- functions for second field types as opposed to closures.

∙ ⊢ A type i   ∙, a : A ⊢ B type j
───────────────────────────────────
  Γ ⊢ (a : A, B) type (max i j)

∙ ⊢ A type i   ∙, a : A ⊢ B type j   Γ ⊢ t : A   Γ ⊢ u : B[a ↦ t]
──────────────────────────────────────────────────────────────────
                  Γ ⊢ (t, u) : (t : A, B)

        Γ ⊢ t : (a : A, B)
──────────────────────────────────────
Γ ⊢ π₁ t : A   Γ ⊢ π₂ t : B[a ↦ π₁ t]

π₁ (t, u) ≡ t
π₂ (t, u) ≡ u
t ≡ (π₁ t, π₂ t)

-- Closures (note that "pack" hides the universe level of the environment!)

 Γ ⊢ A type i   Γ, a : A ⊢ B type j
───────────────────────────────────
  Γ ⊢ Cl (a : A) B type (max i j)

∙ ⊢ E : U i   Γ ⊢ env : El E   ∙ ⊢ t : (ea : (e : El E, A)) → B
───────────────────────────────────────────────────────────────
  Γ ⊢ pack E env t : Cl (a : A[e ↦ env]) (B[ea ↦ (env, a)])

Γ ⊢ t : Cl (a : A) B   Γ ⊢ u : A
────────────────────────────────
      Γ ⊢ t u : B[a ↦ u]

-- closure β:
(pack E env t) u ≡ t (env, u)

-- closure η:
Γ ⊢ t : Cl (a : A) B   Γ ⊢ u : Cl (a : A) B
          Γ, a : A ⊢ t a ≡ u a
───────────────────────────────────────────
              Γ ⊢ t ≡ u

-- Codes (strongly Tarski)

────────────────────
Γ ⊢ U' i : U (i + 1)

El (U' i) ≡ U i

────────────
Γ ⊢ ⊤' : U 0

El ⊤' ≡ ⊤

Γ ⊢ A : U i   Γ ⊢ B : Cl (El A) (U j)
─────────────────────────────────────
      Γ ⊢ A →' B : U (max i j)

El (A →' B) ≡ (a : El A) → El (B a)

∙ ⊢ A : U i   ∙ ⊢ B : El A → U j
────────────────────────────────
   Γ ⊢ (A ,' B) : U (max i j)

El (A ,' B) ≡ (a : El A, El (B a))

Γ ⊢ A : U i   Γ ⊢ B : Cl (El A) (U j)
─────────────────────────────────────
     Γ ⊢ Cl' A B : U (max i j)

El (Cl' A B) ≡ Cl (a : El A) (El (B a))


### Admissibility of function space in target TT


-- Context induction motive
--------------------------------------------------------------------------------

  Γ ⊢
──────────────────────────────────────
  level Γ ∈ ℕ
  ∙ ⊢ quote Γ : U (level Γ)
  Γ ⊢ open  Γ : El (quote Γ)
  e : El (quote Γ) ⊢ close Γ : Γ
  [e ↦ open Γ [ close Γ ]] ≡ id
  close Γ ∘ [ e ↦ open Γ ] ≡ id

-- Type induction motive
--------------------------------------------------------------------------------

  Γ ⊢ A type i
────────────────────
Γ ⊢ quote A : U i
Γ ⊢ El (quote A) ≡ A
∀ σ. quote A [σ] ≡ quote (A [σ])


-- Context proofs (TODO: well-typing proofs)
--------------------------------------------------------------------------------

level ∙          = 0
level (Γ, a : A) = max (level Γ) i    -- where Γ ⊢ A type i

quote ∙          = ⊤'
quote (Γ, a : A) = (quote Γ ,' λ e. quote A [close Γ])

close ∙          = []
close (Γ, a : A) = [(close Γ ∘ [e ↦ π₁ e]), a ↦ π₂ e]

open ∙           = tt
open (Γ, a : A)  = (open Γ, a)

[e ↦ open ∙ [ close ∙ ]] ≡ id
  [e ↦ tt] ≡ id  -- by η-rule for ⊤
  OK

[e ↦ open (Γ, a : A) [ close (Γ, a : A) ]] ≡ id
  [e ↦ (open Γ, a) [(close Γ ∘ [e ↦ π₁ e]), a ↦ π₂ e]] ≡ id
  [e ↦ (open Γ [close Γ ∘ [e ↦ π₁ e]], π₂ e)] ≡ id
  [e ↦ (open Γ [close Γ] [e ↦ π₁ e], π₂ e)] ≡ id
  [e ↦ (e [e ↦ π₁ e], π₂ e)] ≡ id
  [e ↦ (π₁ e, π₂ e)] ≡ id
  [e ↦ e]            ≡ id
  OK

[] ∘ [ e ↦ tt ] ≡ id
  [] ≡ id
  OK

close Γ ∘ [ e ↦ open Γ ] ≡ id
  [(close Γ ∘ [e ↦ π₁ e]), a ↦ π₂ e] ∘ [e ↦ (open Γ, a)] ≡ id
  [close Γ ∘ [e ↦ π₁ e] ∘ [e ↦ (open Γ, a)], a → a] ≡ [id, a ↦ a]
  close Γ ∘ [e ↦ π₁ e] ∘ [e ↦ (open Γ, a)] ≡ id
  close Γ ∘ [e → open Γ] ≡ id
  OK

-- Admissibility of function space (assuming all inductive hypotheses)
--------------------------------------------------------------------------------

We have type formation and application already, we only
need term formation, β, η and substitution rules

Term formation :

       Γ, a : A ⊢ t : B
  ────────────────────────────
  Γ ⊢ (λ {a}.t) : Cl (a : A) B

  -- TODO: well-typing proof
  (λ {a}. t) = pack (quote Γ) (open Γ) (λ e. t [close (Γ, a : A)])

λ{}-β : (λ {a}. t) u ≡ t [a ↦ u]
  (pack (quote Γ) (open Γ) (λ e. t [close (Γ, a : A)])) u ≡ t [a ↦ u]
  t [close (Γ, a : A)] [e ↦ (open Γ, u)] ≡ t [a ↦ u]
  [close Γ ∘ [e ↦ π₁ e], a ↦ π₂ e] [e ↦ (open Γ, u)] ≡ [a ↦ u]
  [close Γ ∘ [e ↦ π₁ e] ∘ [e ↦ (open Γ, u)], a ↦ u] ≡ [a ↦ u]
  [close Γ ∘ [e ↦ open Γ], a ↦ u] ≡ [a ↦ u]
  [id, a ↦ u] ≡ [a ↦ u]
  OK

λ{}-η :
  Γ ⊢ t : Cl (a : A) B
  ────────────────────
  Γ ⊢ t ≡ (λ {a}. t a)

  t a ≡ (λ {a}. t a) a
  t a ≡ (pack (quote Γ) (open Γ) (λ e. t a [close (Γ, a : A)])) a
  t a ≡ t a [close (Γ, a : A)] [e ↦ (open Γ, a)]
  t a ≡ t a
  OK

λ{}-substitution : (λ {a}. t) [σ] ≡ (λ {a}. t [σ, a ↦ a])

    pack (quote Γ) (open Γ [σ]) (λ e. t [close (Γ, a : A)])
  ≡ pack (quote Δ) (open Δ) (λ e. t [σ, a ↦ a]) [close (Δ, a : A[σ])]

    pack (quote Γ) (open Γ [σ]) (λ e. t [close (Γ, a : A)])
  ≡ pack (quote Δ) (open Δ) (λ e. t [σ, a ↦ a]) [close (Δ, a : A[σ])]

    (pack (quote Γ) (open Γ [σ]) (λ e. t [close (Γ, a : A)])) a
  ≡ (pack (quote Δ) (open Δ) (λ e. t [σ, a ↦ a]) [close (Δ, a : A[σ])]) a

    t [close (Γ, a : A)] [e ↦ (open Γ [σ], a)]
  ≡ t [σ, a ↦ a] [close (Δ, a : A[σ])] [e ↦ (open Δ, a)]

    [close (Γ, a : A)] ∘ [e ↦ (open Γ [σ], a)]
  ≡ [σ, a ↦ a] ∘ [close (Δ, a : A[σ])] ∘ [e ↦ (open Δ, a)]

    [(close Γ ∘ [e ↦ π₁ e]), a ↦ π₂ e] ∘ [e ↦ (open Γ [σ], a)]
  ≡ [σ, a ↦ a] ∘ [(close Δ ∘ [e ↦ π₁ e]), a ↦ π₂ e] ∘ [e ↦ (open Δ, a)]

    [close Γ ∘ [e ↦ π₁ e] ∘ [e ↦ (open Γ [σ], a)], a ↦ a]
  ≡ [σ, a ↦ a] ∘ [close Δ ∘ [e ↦ π₁ e] ∘ [e ↦ (open Δ, a)], a ↦ a]

    [close Γ ∘ [e ↦ π₁ e] ∘ [e ↦ (open Γ [σ], a)], a ↦ a]
  ≡ [σ ∘ close Δ ∘ [e ↦ π₁ e] ∘ [e ↦ (open Δ, a)], a ↦ a]

     close Γ ∘ [e ↦ π₁ e] ∘ [e ↦ (open Γ [σ], a)]
  ≡  σ ∘ close Δ ∘ [e ↦ π₁ e] ∘ [e ↦ (open Δ, a)]

     close Γ ∘ [e ↦ open Γ [σ]]
  ≡  σ ∘ close Δ ∘ [e ↦ open Δ]
     close Γ ∘ [e ↦ open Γ [σ]] ≡ σ
     close Γ ∘ [[] ∘ σ, e ↦ open Γ [σ]] ≡ σ
     close Γ ∘ [[], e ↦ open Γ] ∘ σ ≡ σ
     close Γ ∘ [e ↦ open Γ] ∘ σ ≡ σ
     σ ≡ σ OK

-- Type proofs
--------------------------------------------------------------------------------

quote (U i)          = U' i
quote (El A)         = A
quote ⊤              = ⊤'
quote ((a : A) → B)  = quote A →' (λ {a}. quote B)
quote (a : A, B)     = (quote A ,' λ a. quote B)
quote (Cl (a : A) B) = Cl' (quote A) (λ {a}. quote B)

quote (El (U' i) ≡ U i) OK
quote (El ⊤' ≡ ⊤)       OK

quote (El (A →' B) ≡ (a : El A) → El (B a))
           A →' B  ≡ A →' (λ {a}. quote (El (B a)))
  B ≡ (λ {a}. quote (El (B a))
  B a ≡ quote (El (B a) -- by λ{}-η
  B a ≡ B a
  OK

quote (El (A ,' B) ≡ (a : El A, El (B a)))
          (A ,' B) ≡ (quote (El A) ,' λ a. quote (El (B a)))
          (A ,' B) ≡ (A ,' λ a. quote (El (B a)))
          B ≡ λ a. quote (El (B a))
          B a ≡ quote (El (B a))   -- by function eta
          B a ≡ B a
          OK

quote (El (Cl' A B) ≡ Cl (a : El A) (El (B a)))
  same as El (A →' B) case
  OK

El (quote (U i))  ≡ U i    OK
El (quote (El A)) ≡ El A   OK
El (quote ⊤)      ≡ ⊤      OK

El (quote ((a : A) → B)) ≡ (a : A) → B
   El (quote A →' (λ {a}. quote B)) ≡ (a : A) → B
   ((a : El (quote A)) → El ((λ {a}. quote B) a)) ≡ ((a : A) → B)
   El ((λ {a}. quote B) a) ≡ B
   El (quote B) ≡ B  -- λ{}-β
   OK

El (quote (a : A, B)) ≡ (a : A, B)
  El (quote A ,' λ a. quote B) ≡ (a : A, B)
  (a : El (quote A), El (quote B)) ≡ (a : A, B)
  OK

El (quote (Cl (a : A) B)) ≡ Cl (a : A) B
  same as El (quote ((a : A) → B)) ≡ (a : A) → B
  OK

quote (U i) [σ]  ≡ quote (U i [σ])  OK
quote (El A) [σ] ≡ quote (El A [σ]) OK
quote ⊤ [σ]      ≡ quote (⊤ [σ])    OK

quote ((a : A) → B) [σ] ≡ quote (((a : A) → B) [σ])
  hyp:
    Γ ⊢ A type i
    Γ, a : A ⊢ B type j
    Δ ⊢ σ : Γ

  (quote A →' (λ {a}. quote B)) [σ] ≡ quote ((a : A[σ]) → B [σ, a ↦ a])
  (quote A [σ] →' (λ {a}. quote B) [σ]) ≡ (quote (A [σ]) →' (λ {a}. quote (B [σ, a ↦ a])))

  (λ {a}. quote B) [σ] ≡ (λ {a}. quote (B [σ, a ↦ a]))
  (λ {a}. quote B [σ, a ↦ a]) ≡ (λ {a}. quote (B [σ, a ↦ a]))
  (λ {a}. quote (B [σ, a ↦ a])) ≡ (λ {a}. quote (B [σ, a ↦ a]))
  OK

quote (a : A, B) [σ] ≡ quote ((a : A, B) [σ])
  (quote A ,' λ a. quote B) [σ] ≡ quote (a : A[σ], B[σ, a ↦ a])
  (quote A [σ] ,' λ a. quote B [σ, a ↦ a]) ≡ (quote (A[σ]) ,' λ a. quote (B[σ, a ↦ a]))
  OK

quote (Cl (a : A) B) [σ] ≡ quote (Cl (a : A) B [σ])
  same as in (quote ((a : A) → B) [σ] ≡ quote (((a : A) → B) [σ]))
  in particular, make use of: (λ {a}. quote B) [σ] ≡ (λ {a}. quote (B [σ, a ↦ a]))
  OK

### Closure conversion

By mutual induction on source contexts, types, terms and substitutions

-- Motives
--------------------------------------------------------------------------------

Γ ⊢
────
Γᶜ ⊢

Γ ⊢ σ : Δ
────────────
Γᶜ ⊢ σᶜ : Δᶜ

Γ ⊢ A type i
──────────────
Γᶜ ⊢ Aᶜ type i
∀ σ. (A[σ])ᶜ ≡ Aᶜ [σᶜ]

Γ ⊢ t : A
────────────
Γᶜ ⊢ tᶜ : Aᶜ
∀ σ. (t[σ])ᶜ ≡ tᶜ [σᶜ]


-- Proofs
--------------------------------------------------------------------------------

∙ᶜ          = ∙
(Γ, a : A)ᶜ = (Γᶜ, a : Aᶜ)

[]ᶜ         = []
[σ, a ↣ t]ᶜ = [σᶜ, a ↦ tᶜ]    -- TODO: well-typing

(U i)ᶜ  = U i
(El A)ᶜ = El Aᶜ

(U' i)ᶜ     = U' i
(a : A) → B = Cl' Aᶜ (λ {a}. Bᶜ)
(λ a. t)ᶜ   = λ {a}. tᶜ
xᶜ          = x
(t u)ᶜ      = tᶜ uᶜ

(El (U' i))ᶜ ≡ (U i)ᶜ       OK
((λ a. t) u)ᶜ ≡ (t[a ↦ u])ᶜ OK -- admissible λ{}-β
(λ a. t a)ᶜ ≡ tᶜ            OK -- admissible λ{}-η


(U i [σ])ᶜ  ≡ (U i)ᶜ [σᶜ] OK

(El A [σ])ᶜ ≡ (El A)ᶜ [σᶜ]
  El (A [σ])ᶜ ≡ El Aᶜ [σᶜ]
  El (A [σ])ᶜ ≡ El (Aᶜ [σᶜ])
  OK

((U' i) [σ])ᶜ ≡ (U' i)ᶜ [σᶜ] OK

(((a : A) → B) [σ])ᶜ ≡ ((a : A) → B)ᶜ [σᶜ]
  ((a : A[σ]) → B[σ, a ↦ a])ᶜ ≡ (Cl' Aᶜ (λ {a}. Bᶜ)) [σᶜ]
  (Cl' (A[σ])ᶜ (λ {a}. (B[σ, a ↦ a])ᶜ)) ≡ (Cl' (Aᶜ [σᶜ]) (λ {a}. Bᶜ[σᶜ, a ↦ a]))
  OK -- by ind hyp.

(x [σ])ᶜ ≡ xᶜ [σᶜ]
  (x [σ])ᶜ ≡ x [σᶜ]
  tᶜ ≡ tᶜ   where   x ↦ t ∈ σ, so x ↦ tᶜ ∈ σᶜ
  OK

(((λ a. t) u) [σ])ᶜ ≡ ((λ a. t) u)ᶜ [σᶜ]
  ((λ a. t [σ, a ↦ a]) (u [σ]))ᶜ ≡ ((λ {a}. tᶜ) uᶜ) [σᶜ]
  ((λ a. t [σ, a ↦ a]) (u [σ]))ᶜ ≡ ((λ {a}. tᶜ) uᶜ) [σᶜ]
  (λ {a}. (t [σ, a ↦ a])ᶜ) (u [σ])ᶜ ≡ ((λ {a}. tᶜ [σᶜ, a ↦ a]) (uᶜ [σᶜ]))
  OK

--------------------------------------------------------------------------------

### Injectivity of ᶜ

Mutual induction on contexts, types and terms:

                  Γ ⊢
   ─────────────────────────────────────
   ∀ Δ. (Δ ⊢) ∧ (Γᶜ ≡ Δᶜ) implies Γ ≡ Δ

                 Γ ⊢ A
   ────────────────────────────────────────
   ∀ B. (Γ ⊢ B) ∧ (Aᶜ ≡ Bᶜ) implies A ≡ B

               Γ ⊢ t : A
   ────────────────────────────────────────
   ∀ u. (Γ ⊢ u : A) ∧ (tᶜ ≡ uᶜ) implies t ≡ u

Observe that ᶜ returns distinct cxt/type/term formers
for each input former.

Proof:
  in each case, by case discrimination on Δ, B, or u,
  then using induction hypotheses.


### Standard type-theoretic model of target theory (proof of consistency)

induction motives (note: we have Set i, Σ, ⊤, (x : A) → B in metatheory)

       Γ ⊢
──────────────────
Γᴹ ∈ Set (level Γ)

 Γ ⊢ A type i
───────────────
Aᴹ ∈ Γᴹ → Set i

     Γ ⊢ t : A
────────────────────
tᴹ : (γ : Γᴹ) → Aᴹ γ

 Γ ⊢ σ : Δ
───────────
σᴹ : Γᴹ → Δᴹ


only interesting cases: pack, app (other cases are just the standard model)

Cl:

      Γ ⊢ A type i   Γ, a : A ⊢ B type j
  ───────────────────────────────────────────
  (Cl (a : A) B)ᴹ γ = (a : Aᴹ γ) → Bᴹ (γ , a)


pack:

  ∙ ⊢ E : U i   Γ ⊢ env : El E   ∙ ⊢ t : (ea : (e : El E, A)) → B
  ───────────────────────────────────────────────────────────────
     hyp:
       tᴹ tt : (ea : (e : Eᴹ tt, Aᴹ (tt, e))) → Bᴹ(tt, ea)

     goal :
       (a : (A[e ↦ env])ᴹ γ) →  (B[ea ↦ (env, a)])ᴹ (γ, a)

     (pack E env t)ᴹ γ := (λ (a : Aᴹ γ). tᴹ tt (envᴹ γ, a))
       -- OK

app:

  Γ ⊢ t : Cl (a : A) B   Γ ⊢ u : A
  ────────────────────────────────
  (t uᴹ) γ = tᴹ γ (uᴹ γ)

β:

  ((pack E env t)ᴹ γ) (uᴹ γ) ≡ t (env, u))ᴹ:
  ((pack E env t)ᴹ γ) (uᴹ γ) ≡ tᴹ tt (envᴹ γ, uᴹ γ))   -- implicit weakening of t to ∙
  (λ a. tᴹ tt (envᴹ γ, a)) (uᴹ γ) ≡ tᴹ tt (envᴹ γ, uᴹ γ))
  tᴹ tt (envᴹ γ, uᴹ γ) ≡ tᴹ tt (envᴹ γ, uᴹ γ))
  OK

η:
  holds by η in metatheory
