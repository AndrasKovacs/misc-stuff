
{-# OPTIONS --without-K --type-in-type #-}

module ImpredNf where

open import Lib
open import Syntax

*ᴹ : Set
*ᴹ = Σ (∀ Γ' → Con Γ' → Set) λ P → ∀ {Γ' Γ Δ' Δ σ} → Ren {Δ'}{Γ'} σ Δ Γ → P Γ' Γ → P Δ' Δ

data Con'ᴹ : Con' → Set where
  ∙   : Con'ᴹ ∙
  _,_ : ∀ {Γ'} → Con'ᴹ Γ' → *ᴹ → Con'ᴹ (Γ' ,*)

*∈ᴹ : ∀ {Γ'} → *∈ Γ' → Con'ᴹ Γ' → ∀ Δ' → Con Δ' → Set
*∈ᴹ vz     (Γ'ᴹ , (Aᴹ , _)) Δ' Δ = Aᴹ Δ' Δ
*∈ᴹ (vs v) (Γ'ᴹ , Aᴹ      ) Δ' Δ = *∈ᴹ v Γ'ᴹ Δ' Δ

Tyᴹ : ∀ {Γ'} → Ty Γ' → Con'ᴹ Γ' → ∀ Δ' → Con Δ' → Set
Tyᴹ (var v) Γ'ᴹ Δ' Δ = *∈ᴹ v Γ'ᴹ Δ' Δ
Tyᴹ (A ⇒ B) Γ'ᴹ Δ' Δ =
  ∀ {Σ' Σ σ'}(σ : Ren {Σ'} σ' Σ Δ) → Tyᴹ A Γ'ᴹ Σ' Σ → Tyᴹ B Γ'ᴹ Σ' Σ
Tyᴹ (∀' A)  Γᴹ Δ' Δ =
  ∀ {Σ' Σ σ'}(σ : Ren {Σ'} σ' Σ Δ) Bᴹ → Tyᴹ A (Γᴹ , Bᴹ) Σ' Σ

data Conᴹ : ∀ {Γ'} → Con Γ' → Con'ᴹ Γ' → ∀ {Δ'} → Con Δ' → Set where
  ∙   : ∀ {Δ'}{Δ} → Conᴹ {∙} ∙ ∙ {Δ'} Δ
  _,_ : ∀ {Γ' Γ Γ'ᴹ Δ' Δ A} → Conᴹ {Γ'} Γ Γ'ᴹ {Δ'} Δ → Tyᴹ A Γ'ᴹ Δ' Δ → Conᴹ (Γ , A) Γ'ᴹ Δ
  _,* : ∀ {Γ' Γ Γ'ᴹ Aᴹ Δ' Δ} → Conᴹ {Γ'} Γ Γ'ᴹ {Δ'} Δ → Conᴹ (Γ ,*) (Γ'ᴹ , Aᴹ) Δ

Ren'ᴹ : ∀ {Γ Δ} → Ren' Γ Δ → Con'ᴹ Γ → Con'ᴹ Δ
Ren'ᴹ ∙        Γᴹ        = Γᴹ
Ren'ᴹ (drop σ) (Γᴹ , Aᴹ) = Ren'ᴹ σ Γᴹ
Ren'ᴹ (keep σ) (Γᴹ , Aᴹ) = Ren'ᴹ σ Γᴹ , Aᴹ

*∈ᴹᵣ :
  ∀ {Γ' Γ'ᴹ Δ' Δ Σ' Σ σ v}
  → Ren {Σ'}{Δ'} σ Σ Δ → *∈ᴹ {Γ'} v Γ'ᴹ Δ' Δ → *∈ᴹ v Γ'ᴹ Σ' Σ
*∈ᴹᵣ {Γ'ᴹ = Γ'ᴹ , Aᴹ} {v = vz}   = proj₂ Aᴹ
*∈ᴹᵣ {Γ'ᴹ = Γ'ᴹ , Aᴹ} {v = vs v} = *∈ᴹᵣ {v = v}

Tyᴹᵣ :
  ∀ {Γ'} A {Γ'ᴹ Δ' Δ Σ' Σ σ}
  → Ren {Σ'}{Δ'} σ Σ Δ → Tyᴹ {Γ'} A Γ'ᴹ Δ' Δ → Tyᴹ A Γ'ᴹ Σ' Σ
Tyᴹᵣ (var v) σ Aᴹ = *∈ᴹᵣ {v = v} σ Aᴹ
Tyᴹᵣ (A ⇒ B) σ Aᴹ = λ δ → Aᴹ (σ ∘ᵣ δ)
Tyᴹᵣ (∀' A)  σ Aᴹ = λ δ → Aᴹ (σ ∘ᵣ δ)

Sub'ᴹ : ∀ {Γ Δ} → Sub' Γ Δ → Con'ᴹ Γ → Con'ᴹ Δ
Sub'ᴹ ∙       Γᴹ = ∙
Sub'ᴹ (σ , A) Γᴹ = Sub'ᴹ σ Γᴹ , (Tyᴹ A Γᴹ , Tyᴹᵣ A)

Conᴹᵣ :
  ∀ {Γ' Γ Δ' Δ Σ' Σ Γ'ᴹ σ} → Ren {Σ'}{Δ'} σ Σ Δ → Conᴹ {Γ'} Γ Γ'ᴹ Δ → Conᴹ Γ Γ'ᴹ Σ
Conᴹᵣ σ ∙         = ∙
Conᴹᵣ σ (_,_ {A = A} Γᴹ Aᴹ) = (Conᴹᵣ σ Γᴹ) , Tyᴹᵣ A σ Aᴹ
Conᴹᵣ σ (Γᴹ ,*)   = Conᴹᵣ σ Γᴹ ,*  

id'ᵣᴹ : ∀ {Γ} (Γᴹ : Con'ᴹ Γ) → Ren'ᴹ id'ᵣ Γᴹ ≡ Γᴹ
id'ᵣᴹ {∙}    Γᴹ        = refl
id'ᵣᴹ {Γ ,*} (Γᴹ , Aᴹ) = (_, Aᴹ) & id'ᵣᴹ Γᴹ

[]∈'ᵣᴹ :
  ∀ {Γ Δ}(v : *∈ Γ)(σ : Ren' Δ Γ) Γᴹ
  → *∈ᴹ (v [ σ ]∈'ᵣ) Γᴹ ≡ *∈ᴹ v (Ren'ᴹ σ Γᴹ)
[]∈'ᵣᴹ ()     ∙        Γᴹ
[]∈'ᵣᴹ v      (drop σ) (Γᴹ , Aᴹ) = []∈'ᵣᴹ v σ Γᴹ
[]∈'ᵣᴹ vz     (keep σ) (Γᴹ , Aᴹ) = refl
[]∈'ᵣᴹ (vs v) (keep σ) (Γᴹ , Aᴹ) = []∈'ᵣᴹ v σ Γᴹ  

[]'ᵣᴹ :
  ∀ {Γ Δ}(A : Ty Γ)(σ : Ren' Δ Γ) Γᴹ
  → Tyᴹ (A [ σ ]'ᵣ) Γᴹ ≡ Tyᴹ A (Ren'ᴹ σ Γᴹ)
[]'ᵣᴹ (var v) σ Γᴹ = []∈'ᵣᴹ v σ Γᴹ
[]'ᵣᴹ (A ⇒ B) σ Γᴹ rewrite []'ᵣᴹ A σ Γᴹ | []'ᵣᴹ B σ Γᴹ = refl
[]'ᵣᴹ (∀' A)  σ Γᴹ =
  ext λ Δ' → ext λ Δ → Π-≡-i refl λ Σ' → Π-≡-i refl λ Σ → Π-≡-i refl λ δ →
  Π-≡ refl λ _ → Π-≡ refl λ Bᴹ → (λ x → x Σ' Σ) & []'ᵣᴹ A (keep σ) (Γᴹ , Bᴹ)

ₛ∘'ᵣᴹ :
  ∀ {Γ Δ Σ}(σ : Sub' Δ Σ)(δ : Ren' Γ Δ)(Γᴹ : Con'ᴹ Γ)
  → Sub'ᴹ (σ ₛ∘'ᵣ δ) Γᴹ ≡ Sub'ᴹ σ (Ren'ᴹ δ Γᴹ)
ₛ∘'ᵣᴹ ∙       δ Γᴹ = refl
ₛ∘'ᵣᴹ (σ , A) δ Γᴹ = _,_ & ₛ∘'ᵣᴹ σ δ Γᴹ ⊗ 
  ,Σ≡ ([]'ᵣᴹ A δ Γᴹ)
  (exti λ _ → exti λ _ → exti λ _ → exti λ _ → exti λ _ → ext λ ν → ext λ Aᴹ
  → {!Tyᴹᵣ (A [ δ ]'ᵣ)!})

id'ᴹ : ∀ {Γ} (Γᴹ : Con'ᴹ Γ) → Sub'ᴹ id'ₛ Γᴹ ≡ Γᴹ
id'ᴹ {∙}    ∙         = refl
id'ᴹ {Γ ,*} (Γᴹ , (Aᴹ , p)) = 
  (_, (Aᴹ , p))
    & (ₛ∘'ᵣᴹ id'ₛ wk' (Γᴹ , (Aᴹ , p))
    ◾ Sub'ᴹ id'ₛ & id'ᵣᴹ Γᴹ
    ◾ id'ᴹ Γᴹ)

[]∈'ᴹ :
  ∀ {Γ Δ}(v : *∈ Γ)(σ : Sub' Δ Γ) Γᴹ
  → Tyᴹ (v [ σ ]∈') Γᴹ ≡ *∈ᴹ v (Sub'ᴹ σ Γᴹ)
[]∈'ᴹ vz     (σ , A) Γᴹ = refl
[]∈'ᴹ (vs v) (σ , A) Γᴹ = []∈'ᴹ v σ Γᴹ

[]'ᴹ :
  ∀ {Γ Δ}(A : Ty Γ)(σ : Sub' Δ Γ) Γᴹ
  → Tyᴹ (A [ σ ]') Γᴹ ≡ Tyᴹ A (Sub'ᴹ σ Γᴹ)
[]'ᴹ (var v) σ Γᴹ = []∈'ᴹ v σ Γᴹ
[]'ᴹ (A ⇒ B) σ Γᴹ rewrite []'ᴹ A σ Γᴹ | []'ᴹ B σ Γᴹ = refl
[]'ᴹ (∀' A)  σ Γᴹ =
  ext λ Δ' → ext λ Δ → Π-≡-i refl λ Σ' → Π-≡-i refl λ Σ → Π-≡-i refl λ δ
  → Π-≡ refl λ _ → Π-≡ refl λ Bᴹ →
      (λ x → x Σ' Σ) & ([]'ᴹ A (keep'ₛ σ) (Γᴹ , Bᴹ))
    ◾ (λ x → Tyᴹ A (x , Bᴹ) Σ' Σ) & (ₛ∘'ᵣᴹ σ wk' (Γᴹ , Bᴹ) ◾ Sub'ᴹ σ & id'ᵣᴹ Γᴹ)

∈ᴹ :
  ∀ {Γ' Γ A} → _∈_ {Γ'} A Γ
  → (Γᴹ : Con'ᴹ Γ')
  → ∀ {Δ'}{Δ} → Conᴹ Γ Γᴹ {Δ'} Δ → Tyᴹ A Γᴹ Δ' Δ
∈ᴹ vz      Γ'ᴹ       (Γᴹ , Aᴹ) = Aᴹ
∈ᴹ (vs v)  Γ'ᴹ       (Γᴹ , _ ) = ∈ᴹ v Γ'ᴹ Γᴹ
∈ᴹ (vs* {A = A} v) (Γ'ᴹ , x) {Δ'} {Δ} (Γᴹ ,*) =
  coe
      ((λ x → Tyᴹ A x Δ' Δ) & id'ᵣᴹ Γ'ᴹ ⁻¹
    ◾ (λ x → x Δ' Δ) & []'ᵣᴹ A wk' (Γ'ᴹ , x) ⁻¹)
  (∈ᴹ v Γ'ᴹ Γᴹ)

Tmᴹ :
  ∀ {Γ' Γ A} → Tm {Γ'} Γ A
  → (Γᴹ : Con'ᴹ Γ')
  → ∀ {Δ'}{Δ} → Conᴹ Γ Γᴹ {Δ'} Δ → Tyᴹ A Γᴹ Δ' Δ
Tmᴹ (var v)    Γ'ᴹ Γᴹ = ∈ᴹ v Γ'ᴹ Γᴹ
Tmᴹ (lam t)    Γ'ᴹ Γᴹ = λ σ aᴹ → Tmᴹ t Γ'ᴹ (Conᴹᵣ σ Γᴹ , aᴹ)
Tmᴹ (app f a)  Γ'ᴹ Γᴹ = Tmᴹ f Γ'ᴹ Γᴹ idᵣ (Tmᴹ a Γ'ᴹ Γᴹ)
Tmᴹ (tlam t)   Γ'ᴹ Γᴹ = λ σ Bᴹ → Tmᴹ t (Γ'ᴹ , Bᴹ) (Conᴹᵣ σ (Γᴹ ,*)) 
Tmᴹ (tapp {A} t B) Γ'ᴹ {Δ'} {Δ} Γᴹ =
  coe ((λ x → Tyᴹ A (x , (Tyᴹ B Γ'ᴹ , Tyᴹᵣ B)) Δ' Δ) & (id'ᴹ Γ'ᴹ ⁻¹)
      ◾ (λ x → x Δ' Δ) & []'ᴹ A (id'ₛ , B) Γ'ᴹ ⁻¹)
    (Tmᴹ t Γ'ᴹ Γᴹ idᵣ (Tyᴹ B Γ'ᴹ , Tyᴹᵣ B))

