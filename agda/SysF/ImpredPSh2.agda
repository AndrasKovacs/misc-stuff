
{-# OPTIONS --without-K --type-in-type #-}

module ImpredPSh2 where

open import Lib
open import JM
open import Syntax

record *ᴹ : Set where
  constructor con
  field
    obj   : ∀ {Γ'} → Con Γ' → Set
    morph : ∀ {Γ' Γ Δ' Δ σ'} → Ren {Δ'}{Γ'} σ' Δ Γ → obj Γ → obj Δ
open *ᴹ

data Con'ᴹ : Con' → Set where
  ∙   : Con'ᴹ ∙
  _,_ : ∀ {Γ'} → Con'ᴹ Γ' → *ᴹ → Con'ᴹ (Γ' ,*)

*∈ᴹ : ∀ {Γ'} → *∈ Γ' → Con'ᴹ Γ' → ∀ {Γ'} → Con Γ' → Set
*∈ᴹ vz     (Γ'ᴹ , Aᴹ) = obj Aᴹ
*∈ᴹ (vs v) (Γ'ᴹ , Aᴹ) = *∈ᴹ v Γ'ᴹ

Tyᴹ : ∀ {Γ'} → Ty Γ' → Con'ᴹ Γ' → ∀ {Γ'} → Con Γ' → Set
Tyᴹ (var v) Γ'ᴹ = *∈ᴹ v Γ'ᴹ
Tyᴹ (A ⇒ B) Γ'ᴹ = λ Δ → ∀ {Σ' Σ σ'} → Ren {Σ'} σ' Σ Δ → Tyᴹ A Γ'ᴹ Σ → Tyᴹ B Γ'ᴹ Σ
Tyᴹ (∀' A)  Γ'ᴹ = λ Δ → ∀ {Σ' Σ σ'} → Ren {Σ'} σ' Σ Δ → ∀ Bᴹ → Tyᴹ A (Γ'ᴹ , Bᴹ) Σ

*∈ᴹᵣ :
  ∀ {Γ'}(v : *∈ Γ')(Γ'ᴹ : Con'ᴹ Γ')
  → ∀ {Γ' Γ Δ' Δ σ'} → Ren {Δ'}{Γ'} σ' Δ Γ → *∈ᴹ v Γ'ᴹ Γ → *∈ᴹ v Γ'ᴹ Δ
*∈ᴹᵣ vz     (Γ'ᴹ , Aᴹ) = morph Aᴹ
*∈ᴹᵣ (vs v) (Γ'ᴹ , _)  = *∈ᴹᵣ v Γ'ᴹ  

Tyᴹᵣ :
  ∀ {Γ'}(A : Ty Γ')(Γ'ᴹ : Con'ᴹ Γ')
  → ∀ {Γ' Γ Δ' Δ σ'} → Ren {Δ'}{Γ'} σ' Δ Γ → Tyᴹ A Γ'ᴹ Γ → Tyᴹ A Γ'ᴹ Δ
Tyᴹᵣ (var v) Γ'ᴹ = *∈ᴹᵣ v Γ'ᴹ
Tyᴹᵣ (A ⇒ B) Γ'ᴹ = λ σ f δ → f (σ ∘ᵣ δ)
Tyᴹᵣ (∀' A)  Γ'ᴹ = λ σ f δ → f (σ ∘ᵣ δ)  

data Conᴹ : ∀ {Γ'} → Con Γ' → Con'ᴹ Γ' → ∀ {Δ'} → Con Δ' → Set where
  ∙   : ∀ {Δ'}{Δ} → Conᴹ {∙} ∙ ∙ {Δ'} Δ
  _,_ : ∀ {Γ' Γ Γ'ᴹ A  Δ' Δ} → Conᴹ {Γ'} Γ Γ'ᴹ {Δ'} Δ → Tyᴹ A Γ'ᴹ Δ → Conᴹ (Γ , A) Γ'ᴹ Δ
  _,* : ∀ {Γ' Γ Γ'ᴹ Aᴹ Δ' Δ} → Conᴹ {Γ'} Γ Γ'ᴹ {Δ'} Δ → Conᴹ (Γ ,*) (Γ'ᴹ , Aᴹ) Δ

Ren'ᴹ : ∀ {Γ Δ} → Ren' Γ Δ → Con'ᴹ Γ → Con'ᴹ Δ
Ren'ᴹ ∙        Γᴹ        = Γᴹ
Ren'ᴹ (drop σ) (Γᴹ , *ᴹ) = Ren'ᴹ σ Γᴹ
Ren'ᴹ (keep σ) (Γᴹ , *ᴹ) = Ren'ᴹ σ Γᴹ , *ᴹ

Sub'ᴹ : ∀ {Γ Δ} → Sub' Γ Δ → Con'ᴹ Γ → Con'ᴹ Δ
Sub'ᴹ ∙       Γ'ᴹ = ∙
Sub'ᴹ (σ , A) Γ'ᴹ = Sub'ᴹ σ Γ'ᴹ , con (Tyᴹ A Γ'ᴹ) (Tyᴹᵣ A Γ'ᴹ)

Conᴹᵣ :
  ∀ {Γ' Γ Δ' Δ Σ' Σ Γ'ᴹ σ} → Ren {Σ'}{Δ'} σ Σ Δ → Conᴹ {Γ'} Γ Γ'ᴹ Δ → Conᴹ Γ Γ'ᴹ Σ
Conᴹᵣ σ ∙         = ∙
Conᴹᵣ σ (Γᴹ ,*)   = Conᴹᵣ σ Γᴹ ,*  
Conᴹᵣ {Γ'ᴹ = Γ'ᴹ} σ (_,_ {A = A} Γᴹ Aᴹ) = Conᴹᵣ σ Γᴹ , Tyᴹᵣ A Γ'ᴹ σ Aᴹ

id'ᵣᴹ : ∀ {Γ} (Γᴹ : Con'ᴹ Γ) → Ren'ᴹ id'ᵣ Γᴹ ≡ Γᴹ
id'ᵣᴹ {∙}    Γᴹ        = refl
id'ᵣᴹ {Γ ,*} (Γᴹ , *ᴹ) = (_, *ᴹ) & id'ᵣᴹ Γᴹ

[]∈'ᵣᴹ :
  ∀ {Γ' Δ'}(v : *∈ Γ')(σ' : Ren' Δ' Γ') Γ'ᴹ 
  → (λ {x} → *∈ᴹ (v [ σ' ]∈'ᵣ) Γ'ᴹ {x}) ≡ *∈ᴹ v (Ren'ᴹ σ' Γ'ᴹ)
[]∈'ᵣᴹ ()     ∙         Γᴹ
[]∈'ᵣᴹ v      (drop σ') (Γ'ᴹ , Aᴹ) = []∈'ᵣᴹ v σ' Γ'ᴹ
[]∈'ᵣᴹ vz     (keep σ') (Γ'ᴹ , Aᴹ) = refl
[]∈'ᵣᴹ (vs v) (keep σ') (Γ'ᴹ , Aᴹ) = []∈'ᵣᴹ v σ' Γ'ᴹ

[]'ᵣᴹ :
  ∀ {Γ' Δ'}(A : Ty Γ')(σ' : Ren' Δ' Γ') Γ'ᴹ
  → (λ {x} → Tyᴹ (A [ σ' ]'ᵣ) Γ'ᴹ {x}) ≡ Tyᴹ A (Ren'ᴹ σ' Γ'ᴹ)
[]'ᵣᴹ (var v) σ' Γ'ᴹ = []∈'ᵣᴹ v σ' Γ'ᴹ 
[]'ᵣᴹ (A ⇒ B) σ' Γ'ᴹ rewrite []'ᵣᴹ A σ' Γ'ᴹ | []'ᵣᴹ B σ' Γ'ᴹ = refl
[]'ᵣᴹ (∀' A)  σ' Γ'ᴹ =
  exti λ Δ' → ext λ Δ → Π-≡-i refl λ Ξ' → Π-≡-i refl λ Ξ →
  Π-≡-i refl λ δ' → Π-≡ refl λ δ → Π-≡ refl λ Bᴹ →
  (λ f → f Ξ) & []'ᵣᴹ A (keep σ') (Γ'ᴹ , Bᴹ)

ₛ∘'ᵣᴹ :
  ∀ {Γ Δ Σ}(σ : Sub' Δ Σ)(δ : Ren' Γ Δ)(Γᴹ : Con'ᴹ Γ)
  → Sub'ᴹ (σ ₛ∘'ᵣ δ) Γᴹ ≡ Sub'ᴹ σ (Ren'ᴹ δ Γᴹ)
ₛ∘'ᵣᴹ ∙       δ Γ'ᴹ = refl
ₛ∘'ᵣᴹ (σ , A) δ Γ'ᴹ = _,_ & ₛ∘'ᵣᴹ σ δ Γ'ᴹ ⊗ {![]'ᵣᴹ A δ Γ'ᴹ!}

-- id'ᴹ : ∀ {Γ} (Γᴹ : Con'ᴹ Γ) → Sub'ᴹ id'ₛ Γᴹ ≡ Γᴹ
-- id'ᴹ {∙}    ∙         = refl
-- id'ᴹ {Γ ,*} (Γᴹ , *ᴹ) =
--   (_, *ᴹ) & (ₛ∘'ᵣᴹ id'ₛ wk' (Γᴹ , *ᴹ) ◾ Sub'ᴹ id'ₛ & id'ᵣᴹ Γᴹ ◾ id'ᴹ Γᴹ)

-- []∈'ᴹ :
--   ∀ {Γ' Δ' Σ'}(v : *∈ Γ')(σ' : Sub' Δ' Γ') Γ'ᴹ (Σ : Con Σ')
--   → Tyᴹ (v [ σ' ]∈') Γ'ᴹ Σ ≡ *∈ᴹ v (Sub'ᴹ σ' Γ'ᴹ) Σ
-- []∈'ᴹ vz     (σ , A) Γᴹ Σ = refl
-- []∈'ᴹ (vs v) (σ , A) Γᴹ Σ = []∈'ᴹ v σ Γᴹ Σ

-- []'ᴹ :
--   ∀ {Γ Δ}(A : Ty Γ)(σ : Sub' Δ Γ) Γᴹ
--   → Tyᴹ (A [ σ ]') Γᴹ ≡ Tyᴹ A (Sub'ᴹ σ Γᴹ)
-- []'ᴹ (var v) σ Γᴹ = []∈'ᴹ v σ Γᴹ
-- []'ᴹ (A ⇒ B) σ Γᴹ rewrite []'ᴹ A σ Γᴹ | []'ᴹ B σ Γᴹ = refl
-- []'ᴹ (∀' A)  σ Γᴹ = *ᴹ≡'
--   (λ Γ → Π-≡-i refl λ Σ' → Π-≡-i refl λ Σ → Π-≡-i refl λ δ' → Π-≡ refl λ δ → Π-≡ refl λ Bᴹ →
--       (_$ᴾ Σ) & []'ᴹ A (keep'ₛ σ) (Γᴹ , Bᴹ)
--     ◾ (λ x → Tyᴹ A (x , Bᴹ) $ᴾ Σ) &
--         (ₛ∘'ᵣᴹ σ wk' (Γᴹ , Bᴹ) ◾ Sub'ᴹ σ & id'ᵣᴹ Γᴹ))
--   (λ δ α β p → exti≃' λ Ξ' → exti≃' λ Ξ → exti≃' λ δ' → ext≃' λ δ → ext≃' λ Bᴹ →
--   {!!})

-- ∈ᴹ :
--   ∀ {Γ' Γ A} → _∈_ {Γ'} A Γ
--   → (Γᴹ : Con'ᴹ Γ')
--   → ∀ {Δ'}{Δ} → Conᴹ Γ Γᴹ {Δ'} Δ → Tyᴹ A Γᴹ $ᴾ Δ
-- ∈ᴹ vz               Γ'ᴹ               (Γᴹ , α) = α
-- ∈ᴹ (vs v)           Γ'ᴹ               (Γᴹ , _) = ∈ᴹ v Γ'ᴹ Γᴹ
-- ∈ᴹ (vs* {A = A} v) (Γ'ᴹ , *ᴹ) {Δ'}{Δ} (Γᴹ ,*)  = 
--   coe
--       ((λ x → Tyᴹ A x $ᴾ Δ) & id'ᵣᴹ Γ'ᴹ ⁻¹
--     ◾ (_$ᴾ Δ) & []'ᵣᴹ A wk' (Γ'ᴹ , *ᴹ) ⁻¹)
--   (∈ᴹ v Γ'ᴹ Γᴹ)

-- Tmᴹ :
--   ∀ {Γ' Γ A} → Tm {Γ'} Γ A
--   → (Γᴹ : Con'ᴹ Γ')
--   → ∀ {Δ'}{Δ} → Conᴹ Γ Γᴹ {Δ'} Δ → Tyᴹ A Γᴹ $ᴾ Δ
-- Tmᴹ (var v)    Γ'ᴹ Γᴹ = ∈ᴹ v Γ'ᴹ Γᴹ
-- Tmᴹ (lam t)    Γ'ᴹ Γᴹ = λ σ aᴹ → Tmᴹ t Γ'ᴹ (Conᴹᵣ σ Γᴹ , aᴹ)
-- Tmᴹ (app f a)  Γ'ᴹ Γᴹ = Tmᴹ f Γ'ᴹ Γᴹ idᵣ (Tmᴹ a Γ'ᴹ Γᴹ)
-- Tmᴹ (tlam t)   Γ'ᴹ Γᴹ = λ σ Bᴹ → Tmᴹ t (Γ'ᴹ , Bᴹ) (Conᴹᵣ σ (Γᴹ ,*)) 
-- Tmᴹ (tapp {A} t B) Γ'ᴹ {Δ'} {Δ} Γᴹ =
--    coe ((λ x → Tyᴹ A (x , Tyᴹ B Γ'ᴹ) $ᴾ Δ) & (id'ᴹ Γ'ᴹ ⁻¹)
--      ◾ (_$ᴾ Δ) & []'ᴹ A (id'ₛ , B) Γ'ᴹ ⁻¹)
--    (Tmᴹ t Γ'ᴹ Γᴹ idᵣ (Tyᴹ B Γ'ᴹ))

